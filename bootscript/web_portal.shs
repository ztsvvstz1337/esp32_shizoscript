
//Some definitions....

header_buttons = [
	"HOME" = "/",
	"SETTINGS" = "/settings",
	"CONSOLE" = "/console"
];

all_files = [
	header_chunk = "header_chunk.html",
	section_start = "section_start.html",
	control_slider = "control_slider.html",
	control_text = "control_text.html",
	control_checkbox = "control_checkbox.html",
	control_color = "control_color.html",
	section_end = "section_end.html",
	footer_chunk = "footer_chunk.html",
	section_presets = "section_presets.html",
	status_block = "status_block.html",
	ai_setup = "ai_setup.html",
];

//Loading stuff...

chunks = 0;

print("web_portal(): init webserver...");

load_chunks()
{
	print("Loading webportal templates...");
	for(i = 0; i < all_files:count(); i++)
	{
		name = all_files:key(i);
		chunks[name] = string(fileread("/ui/" + all_files[i]));
	}
	print("loaded.");
}

load_chunks();

config_update = 0;
update_config_thread()
{
	for(1)
	{
		//This is to relax saving on update spam...
		if(config_update)
			sleep(500);
			save_config();
			config_update = 0;
		sleep(3000);
	}
}
~update_config_thread();

get_id(name)
{
	id = name:lowercase();
	id = id:removecharsexcept("abcdefghijklmnopqrstuvwqyz0123456789");
	return id;
}

//HTML template render functions...

class WebPortal =
{
	server = 0;
	closed_last_section = 1;
	
	WebPortal()
	{
		server = webserver();
		closed_last_section = 1;
	}
	
	~WebPortal()
	{
		free(server);
	}

	//UI Controls

	render(chunk_name, options)
	{
		str = chunks[chunk_name];
		for(i = 0; i < options:count(); i++)
		{
			r1 = options:key(i);
			r2 = options[i];
			
			str = str:replace("{{" + r1 + "}}", r2);
		}
		
		return str;
	}

	add_start()
	{
		btns_str = "";
		for(i = 0; i < header_buttons:count(); i++)
		{
			//<a href="/settings">SETTINGS</a>
			btns_str += "<a href=" + qt() + header_buttons[i] + qt() + ">" + header_buttons:key(i) + "</a>\n";
		}
		return render("header_chunk", [device_name=default_config.name, buttons=btns_str]);
	}

	add_end()
	{
		return render("footer_chunk", 0);
	}

	add_section(title)
	{
		str = "";
		if(!closed_last_section)
			str += render("section_end", 0);
		if(!title:empty_str())
			str += render("section_start", [section_title = title]);
			closed_last_section = 0;
		return str;
	}

	add_presets()
	{
		return render("section_presets", 0);
	}

	add_status()
	{
		return render("status_block", [ip=shizonet.get_ip(), mac=shizonet.get_mac()]);
	}

	add_ctrl(type, name, cb, options)
	{
		id = get_id(name);
		
		options.id = id;
		options.name = name;
		
		str = render("control_" + type, options);	
		
		server.post("/"+id, [this, cb](post_data)
		{
			cb(post_data);
			this.server.send(200, "text/html", "success");
		});
		
		return str;
	}

	add_slider(name, cb, minv, maxv, defaultv)
	{
		options = [min=minv, max=maxv, value=defaultv];
		
		id = get_id(name);
		
		if(default_config:has_key(id))
			options.value = default_config[id];
		
		cb2 = [id](post_data)
		{
			print("updating: " + id);
			default_config[id] = post_data.value;
			config_update = 1;
		};
		
		if(cb:is_function())
			cb2 = cb;
		
		return add_ctrl("slider", name, cb2, options);
	}

	add_text(name, cb, defaultv)
	{
		options = [value=defaultv];
		
		id = get_id(name);
		
		if(default_config:has_key(id))
			options.value = default_config[id];
		
		cb2 = [id](post_data)
		{
			print("updating: " + id);
			default_config[id] = post_data.value;
			config_update = 1;
		};
		
		if(cb:is_function())
			cb2 = cb;
		
		return add_ctrl("text", name, cb2, options);
	}

	add_checkbox(name, cb, defaultv)
	{
		options = [checked=defaultv];
		
		id = get_id(name);
		
		if(default_config:has_key(id))
			options.checked = default_config[id];
		
		cb2 = [id](post_data)
		{
			print("updating: " + id);
			default_config[id] = post_data.value;
			config_update = 1;
		};
		
		if(cb:is_function())
			cb2 = cb;
		
		return add_ctrl("checkbox", name, cb2, options);
	}

	//Add new sites
	
	add_site(url, cb)
	{
		server.on(url, [this, cb]()
		{
			page = this.add_start();
			page += cb();
			page += this.add_section("");
			page += this.add_end();	
			this.server.send(200, "text/html", page);
		});
	}
};

global webui = WebPortal();

webui.add_site("/settings", ()
{	
	page = 	webui.add_section("Local Network Settings");
	page += webui.add_text("Name", 0, "ESP32");
	page += webui.add_text("Password", 0, "admin");
	page += webui.add_text("IP", 0, "2.0.0.10");
	page += webui.add_text("Gateway", 0, "2.0.0.1");
	page += webui.add_text("Netmask", 0, "255.255.255.0");
	
	page += webui.add_section("Remote WLANs");
	
	add_wlan_option(numid)
	{
		def_ssid = default_config.wlans[numid].ssid;
		if(def_ssid:empty_str())
			def_ssid = "";
		def_pw = default_config.wlans[numid].password;
		if(def_pw:empty_str())
			def_pw = "";
		
		page += webui.add_text("WLAN " + (numid+1) + " SSID", [numid](post_data)
		{
			print("updating: wlan" + numid);
			default_config.wlans[numid].ssid = post_data.value;
			config_update = 1;
		}, def_ssid);
		page += webui.add_text("WLAN " + (numid+1) + " Password", [numid](post_data)
		{
			print("updating: wlan" + numid + " pw");
			default_config.wlans[numid].password = post_data.value;
			config_update = 1;
		}, def_pw);
	}
	
	for(i = 0; i < 6; i++)
	{
		add_wlan_option(i);
	}
	
	page += webui.add_section("System");
	
	page += webui.add_checkbox("Debug", (post_data)
	{
		print("updating: debug");
		default_config["debug"] = post_data.value;
		config_update = 1;
	}, 0);
	
	return page;
});

webui.add_site("/", ()
{
	page = webui.add_presets();
	page += webui.add_section("Status");
	page += webui.add_status();
	
	return page;
});

print("web_portal(): active");
