print("web_portal(): init webserver...");

//Some definitions....

global header_buttons = [
	"HOME" = "/home",
	"SETTINGS" = "/settings",
	"FILES" = "/filebrowser",
	"UPDATE" = "/updatemenu",
];

templates = [
	menu=string(fileread("/ui/menu.html")),
	styles=string(fileread("/ui/styles.css")),
];

//-----------------------------------------

//Start loading UI elements automatically
print("Loading templates...");
templated_files = fs_list_files("/ui/templates");
print(templated_files);
for(tmpl_file :: templated_files)
{
	tmpl_name = os.file_name(tmpl_file);
	templates[tmpl_name] = string(fileread(tmpl_file));
}

//print("TEMPLATES:");
//print(templates);


//Loading stuff...
print("Starting config update thread...");

config_update = 0;
update_config_thread()
{
	for(1)
	{
		//This is to relax saving on update spam...
		if(config_update)
			sleep(500);
			save_config();
			config_update = 0;
		sleep(1000);
	}
}
~update_config_thread();

get_id(name)
{
	id = name:lowercase();
	id = id:removecharsexcept("abcdefghijklmnopqrstuvwqyz0123456789");
	return id;
}

//HTML template render functions...
print("init webportal class...");

class WebPortal =
{
	server = 0;
	closed_last_section = 1;
	
	on_main_page = 0;
	
	WebPortal()
	{
		server = webserver();
		closed_last_section = 1;
	}
	
	~WebPortal()
	{
		free(server);
	}

	//UI Controls

	render(chunk_name, options = 0)
	{
		str = templates[chunk_name];
		for(i = 0; i < options:count(); i++)
		{
			r1 = options:key(i);
			r2 = options[i];
			
			str = str:replace("{{" + r1 + "}}", r2);
		}
		
		return str;
	}

	add_start()
	{
		return render("page_start", [styles=templates["styles"]]);
	}

	add_end()
	{
		return render("page_end");
	}

	add_section(title)
	{
		str = "";
		if(!closed_last_section)
			str += render("section_end", 0);
		if(!title:empty_str())
			str += render("section_start", [section_title = title]);
			closed_last_section = 0;
		return str;
	}
	
	add_html(path)
	{
		return string(fileread(path));
	}

	add_presets()
	{
		return render("section_presets", 0);
	}

	add_status()
	{
		return render("status_block", [ip=shizonet.get_ip(), mac=shizonet.get_mac()]);
	}

	add_ctrl(type, name, cb, options)
	{
		id = get_id(name);
		
		options.id = id;
		options.name = name;
		
		str = render("control_" + type, options);	
		
		server.post("/"+id, [this, cb](post_data)
		{
			cb(post_data);
			this.server.send(200, "text/html", "success");
		});
		
		return str;
	}

	add_slider(name, cb, minv, maxv, defaultv)
	{
		options = [min=minv, max=maxv, value=defaultv];
		
		id = get_id(name);
		
		if(default_config:has_key(id))
			options.value = default_config[id];
		
		cb2 = [id](post_data)
		{
			print("updating: " + id);
			default_config[id] = post_data.value;
			config_update = 1;
		};
		
		if(cb:is_function())
			cb2 = cb;
		
		return add_ctrl("slider", name, cb2, options);
	}

	add_text(name, cb, defaultv)
	{
		options = [value=defaultv];
		
		id = get_id(name);
		
		if(default_config:has_key(id))
			options.value = default_config[id];
		
		cb2 = [id](post_data)
		{
			print("updating: " + id);
			default_config[id] = post_data.value;
			config_update = 1;
		};
		
		if(cb:is_function())
			cb2 = cb;
		
		return add_ctrl("text", name, cb2, options);
	}

	add_checkbox(name, cb, defaultv)
	{
		options = [checked=defaultv];
		
		id = get_id(name);
		
		if(default_config:has_key(id))
			options.checked = default_config[id];
		
		cb2 = [id](post_data)
		{
			print("updating: " + id);
			default_config[id] = post_data.value;
			config_update = 1;
		};
		
		if(cb:is_function())
			cb2 = cb;
			
		//'checked' html attribute
		if(options.checked)
			options.checked = "checked";
		else
			options.checked = "";
		
		return add_ctrl("checkbox", name, cb2, options);
	}

	//Add header buttons
	add_header(name, url)
	{
		header_buttons[name] = url;
	}

	//Add new sites
	
	add_site(url, cb)
	{
		server.on(url, [this, cb]()
		{
			page = this.add_start();
			page += cb();
			page += this.add_section("");
			page += this.add_end();	
			this.server.send(200, "text/html", page);
		});
	}
	
	add_root(url, cb)
	{
		server.on(url, [this, cb]()
		{
			page = cb();
			this.server.send(200, "text/html", page);
		});
	}
	
	add_not_found(cb)
	{
		server.on_not_found([this, cb](uri)
		{
			page = cb(uri);
			if(page:empty_str())
				this.server.send(404, "text/html", page);
			else
				this.server.send(200, "text/html", page);
		});
	}
	
	//Receive post data from webui
	add_post(url, cb)
	{
		server.post(url, [this, cb](post_data)
		{
			cb(post_data);
			this.server.send(200, "text/html", "success");
		});
	}

	//Webui request json data from us
	add_json(url, cb)
	{
		server.post(url, [this, cb](post_data)
		{
			ret = cb(post_data);
			this.server.send(200, "application/json", string(ret));
		});
	}
	
	
	add_main_page_stub()
	{
		if(on_main_page:is_function())
			return on_main_page();
		return "";
	}
};

global webui = WebPortal();

print("adding net routes...");

webui.add_root("/", ()
{
	hdr = "";
	
	//<a href="/home" target="contentFrame">üè† Home</a>
	
	for(i = 0; i < header_buttons:count(); i++)
	{
		hdr += f"<a href='{{header_buttons[i]}}' target='contentFrame'>{{header_buttons:key(i)}}</a>\n";
	}
	
	name = default_config.name;
	name += " [" + shizonet.get_mac() + "] (" + shizonet.get_ip() + ")";
	
	page = webui.render("menu", [name=name, header_buttons = hdr]);
	return page;
});

webui.add_site("/home", ()
{
	page = webui.add_main_page_stub();
	page += webui.add_section("Status");
	page += webui.add_status();
	
	return page;
});

webui.add_site("/settings", ()
{	
	page = 	webui.add_section("Local Network Settings");
	page += webui.add_text("Name", 0, "ESP32");
	page += webui.add_text("Password", 0, "admin");
	page += webui.add_text("IP", 0, "2.0.0.10");
	page += webui.add_text("Gateway", 0, "2.0.0.1");
	page += webui.add_text("Netmask", 0, "255.255.255.0");
	page += webui.add_checkbox("DHCP Server", 0, 0);
	
	page += webui.add_section("Remote WLANs");
	
	add_wlan_option(numid)
	{
		def_ssid = default_config.wlans[numid].ssid;
		if(def_ssid:empty_str())
			def_ssid = "";
		def_pw = default_config.wlans[numid].password;
		if(def_pw:empty_str())
			def_pw = "";
		
		page += webui.add_text("WLAN " + (numid+1) + " SSID", [numid](post_data)
		{
			print("updating: wlan" + numid);
			default_config.wlans[numid].ssid = post_data.value;
			config_update = 1;
		}, def_ssid);
		page += webui.add_text("WLAN " + (numid+1) + " Password", [numid](post_data)
		{
			print("updating: wlan" + numid + " pw");
			default_config.wlans[numid].password = post_data.value;
			config_update = 1;
		}, def_pw);
	}
	
	for(i = 0; i < 6; i++)
	{
		add_wlan_option(i);
	}
	
	page += webui.add_section("System");
	
	page += webui.add_checkbox("Debug", (post_data)
	{
		print("updating: debug");
		default_config["debug"] = post_data.value;
		config_update = 1;
	}, 0);
	
	return page;
});

webui.add_site("/filebrowser", ()
{
	page = webui.add_html("/ui/static/code_editor.html");
	return page;
});

webui.add_json("/fb/list", (args)
{
	print("file list get.");
	return fs_list_files("/");
});

webui.add_json("/fb/file", (args)
{
	file_name = from_json_string(args.plain);

	print("file get.");
	print(file_name.path);
	return string(fileread(file_name.path));
});

webui.add_json("/fb/save", (args)
{
	file_name = from_json_string(args.plain);

	print("file save.");
	print(file_name);
	filewrite(file_name.path, file_name.content);
	//return string(fileread(file_name.path));
	return [success=1];
});

webui.add_not_found((uri)
{
	print("TEST YES!");
	print(uri);
	if(uri[0] == "/")
		uri = uri:substr(1);
	page = string(fileread("/ui/" + uri));
	print(page:count());
	return page;
});

print("web_portal(): active");
